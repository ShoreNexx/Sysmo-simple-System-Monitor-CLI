#!/usr/bin/env python3

import psutil
import curses
import time

def main(screen):
    # Set up the screen
    curses.curs_set(0)  # Hide the cursor
    screen.nodelay(1)   # Non-blocking input
    
    # Define color pairs (foreground/background)
    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN, curses.COLOR_BLACK)  # Header color
    curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK) # Low usage
    curses.init_pair(3, curses.COLOR_YELLOW, curses.COLOR_BLACK) # Moderate usage
    curses.init_pair(4, curses.COLOR_RED, curses.COLOR_BLACK)   # High usage

    while True:
        screen.clear()
        
        # Display Header
        screen.attron(curses.color_pair(1))
        screen.addstr(0, 0, "SysMon - Linux System Monitor".center(curses.COLS))
        screen.attroff(curses.color_pair(1))

        # Display CPU Usage
        cpu_percents = psutil.cpu_percent(percpu=True)
        screen.addstr(2, 0, "CPU Usage:")
        for i, cpu in enumerate(cpu_percents):
            color = 2 if cpu < 50 else 3 if cpu < 80 else 4
            screen.attron(curses.color_pair(color))
            screen.addstr(3 + i, 4, f"Core {i + 1}: [{int(cpu / 10) * '█':<10}] {cpu}%")
            screen.attroff(curses.color_pair(color))

        # Display Memory Usage
        memory = psutil.virtual_memory()
        memory_usage = int(memory.percent)
        screen.addstr(len(cpu_percents) + 4, 0, "Memory Usage:")
        screen.attron(curses.color_pair(3 if memory_usage < 80 else 4))
        screen.addstr(len(cpu_percents) + 5, 4, f"Total: {memory.total // (1024 ** 3)}GB   "
                                                 f"Used: {memory.used // (1024 ** 3)}GB   "
                                                 f"Free: {memory.free // (1024 ** 3)}GB")
        screen.addstr(len(cpu_percents) + 6, 4, f"[{int(memory_usage / 10) * '█':<10}] {memory.percent}%")
        screen.attroff(curses.color_pair(3 if memory_usage < 80 else 4))

        # Display Disk Usage
        disk = psutil.disk_usage('/')
        disk_usage = int(disk.percent)
        screen.addstr(len(cpu_percents) + 8, 0, "Disk Usage:")
        screen.attron(curses.color_pair(3 if disk_usage < 80 else 4))
        screen.addstr(len(cpu_percents) + 9, 4, f"Total: {disk.total // (1024 ** 3)}GB   "
                                                 f"Used: {disk.used // (1024 ** 3)}GB   "
                                                 f"Free: {disk.free // (1024 ** 3)}GB")
        screen.addstr(len(cpu_percents) + 10, 4, f"[{int(disk_usage / 10) * '█':<10}] {disk.percent}%")
        screen.attroff(curses.color_pair(3 if disk_usage < 80 else 4))

        # Display Network Info
        net_io = psutil.net_io_counters()
        screen.addstr(len(cpu_percents) + 12, 0, "Network Activity:")
        screen.attron(curses.color_pair(2))
        screen.addstr(len(cpu_percents) + 13, 4, f"Upload: {net_io.bytes_sent // 1024} KB   "
                                                  f"Download: {net_io.bytes_recv // 1024} KB")
        screen.attroff(curses.color_pair(2))

        # Display Top Processes
        screen.addstr(len(cpu_percents) + 15, 0, "Top Processes (CPU and Memory):")
        processes = [(p.info['pid'], p.info['cpu_percent'], p.info['memory_percent'], p.info['name']) 
                     for p in psutil.process_iter(['pid', 'cpu_percent', 'memory_percent', 'name'])]
        top_processes = sorted(processes, key=lambda x: x[1], reverse=True)[:5]
        for i, proc in enumerate(top_processes):
            screen.addstr(len(cpu_percents) + 16 + i, 4, f"PID: {proc[0]}   CPU%: {proc[1]}   MEM%: {proc[2]:.1f}   {proc[3]}")
        
        screen.refresh()
        time.sleep(1)

# Initialize the curses application
curses.wrapper(main)
